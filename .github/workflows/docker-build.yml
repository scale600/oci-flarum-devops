name: Docker Build and Deploy

on:
  push:
    branches: [ main ]
    paths: [ 'docker/**', 'ansible/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'docker/**' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Flarum image
      uses: docker/build-push-action@v5
      with:
        context: ./docker/flarum
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push MySQL image
      uses: docker/build-push-action@v5
      with:
        context: ./docker/mysql
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mysql:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # security-scan:
  #   name: Security Scan
  #   runs-on: ubuntu-latest
  #   needs: build-and-push
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #
  #   - name: Run Trivy vulnerability scanner
  #     uses: aquasecurity/trivy-action@master
  #     with:
  #       image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
  #       format: 'sarif'
  #       output: 'trivy-results.sarif'
  #
  #   - name: Upload Trivy scan results to GitHub Security tab
  #     uses: github/codeql-action/upload-sarif@v3
  #     if: always()
  #     with:
  #       sarif_file: 'trivy-results.sarif'

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Terraform outputs
      uses: actions/download-artifact@v4
      with:
        name: terraform-outputs
        path: ./terraform-outputs/

    - name: Parse Terraform outputs
      id: terraform
      run: |
        FLARUM_IP=$(jq -r '.flarum_instance_public_ip.value' ./terraform-outputs/terraform-outputs.json)
        echo "flarum_ip=$FLARUM_IP" >> $GITHUB_OUTPUT

    - name: Deploy with Ansible
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ steps.terraform.outputs.flarum_ip }}
        username: opc
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd /opt/flarum
          docker-compose pull
          docker-compose up -d
          docker-compose ps

    - name: Health Check
      run: |
        sleep 30
        curl -f http://${{ steps.terraform.outputs.flarum_ip }} || exit 1

    - name: Notify deployment success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "üöÄ Flarum deployment successful! Access: http://${{ steps.terraform.outputs.flarum_ip }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify deployment failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "‚ùå Flarum deployment failed!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
