---
- name: Configure Flarum Community Server
  hosts: flarum_servers
  become: true
  vars:
    mysql_root_password: "{{ MYSQL_ROOT_PASSWORD }}"
    mysql_database: "{{ MYSQL_DATABASE | default('flarum') }}"
    mysql_user: "{{ MYSQL_USER | default('flarum') }}"
    mysql_password: "{{ MYSQL_PASSWORD }}"
    flarum_data_dir: "/opt/flarum"
    docker_compose_version: "2.21.0"

  tasks:
    - name: Create swap file for micro instance
      ansible.builtin.shell: |
        set -o pipefail
        # Create 2GB swap file
        sudo fallocate -l 2G /swapfile
        sudo chmod 600 /swapfile
        sudo mkswap /swapfile
        sudo swapon /swapfile
        echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
      changed_when: false

    - name: Skip system package update (too slow on micro instance)
      ansible.builtin.shell: |
        echo "Skipping system package update on micro instance - too slow"
        echo "Installing only essential packages..."
      changed_when: false

    - name: Install essential packages only
      ansible.builtin.dnf:
        name:
          - docker
          - git
          - curl
          - firewalld
        state: present
        update_cache: false

    - name: Install Docker Compose manually
      ansible.builtin.get_url:
        url: >-
          https://github.com/docker/compose/releases/download/
          v{{ docker_compose_version }}/docker-compose-linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: "0755"
        owner: root
        group: root

    - name: Create docker-compose symlink
      ansible.builtin.file:
        src: /usr/local/bin/docker-compose
        dest: /usr/bin/docker-compose
        state: link
        owner: root
        group: root

    - name: Verify docker-compose installation
      ansible.builtin.command: docker-compose --version
      register: docker_compose_version_check
      changed_when: false

    - name: Start and enable Docker service
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: true

    - name: Start and enable firewalld
      ansible.builtin.systemd:
        name: firewalld
        state: started
        enabled: true

    - name: Add opc user to docker group
      ansible.builtin.user:
        name: opc
        groups: docker
        append: true

    - name: Create Flarum data directory
      ansible.builtin.file:
        path: "{{ flarum_data_dir }}"
        state: directory
        owner: opc
        group: opc
        mode: "0755"

    - name: Create Docker Compose file
      ansible.builtin.template:
        src: docker-compose.yml.j2
        dest: "{{ flarum_data_dir }}/docker-compose.yml"
        owner: opc
        group: opc
        mode: "0644"

    - name: Create environment file
      ansible.builtin.template:
        src: env.j2
        dest: "{{ flarum_data_dir }}/.env"
        owner: opc
        group: opc
        mode: "0600"

    - name: Create Flarum configuration script
      ansible.builtin.template:
        src: configure-flarum.sh.j2
        dest: "{{ flarum_data_dir }}/configure-flarum.sh"
        owner: opc
        group: opc
        mode: "0755"

    - name: Configure firewall rules
      ansible.posix.firewalld:
        port: "{{ item }}"
        permanent: true
        state: enabled
        immediate: true
      loop:
        - "80/tcp"
        - "443/tcp"
        - "22/tcp"

    - name: Start Flarum services
      ansible.builtin.shell: |
        cd {{ flarum_data_dir }}
        docker-compose up -d
      become: true
      become_user: opc
      changed_when: false

    - name: Wait for services to be ready
      ansible.builtin.wait_for:
        port: 80
        host: "{{ ansible_default_ipv4.address }}"
        delay: 30
        timeout: 300

    - name: Display Flarum setup information
      ansible.builtin.debug:
        msg: |
          Flarum is now running!
          Access your forum at: http://{{ ansible_default_ipv4.address }}
          Complete the initial setup through the web interface.
