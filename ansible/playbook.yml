---
- name: Configure Flarum Community Server
  hosts: flarum_servers
  become: true
  vars:
    mysql_root_password: "{{ MYSQL_ROOT_PASSWORD }}"
    mysql_database: "{{ MYSQL_DATABASE | default('flarum') }}"
    mysql_user: "{{ MYSQL_USER | default('flarum') }}"
    mysql_password: "{{ MYSQL_PASSWORD }}"
    flarum_data_dir: "/opt/flarum"
    docker_compose_version: "2.21.0"

  tasks:
    - name: Update system packages
      ansible.builtin.dnf:
        name: "*"
        state: present
        update_cache: true

    - name: Install required packages
      ansible.builtin.dnf:
        name:
          - docker
          - docker-compose
          - git
          - curl
          - wget
          - unzip
          - firewalld
          - certbot
          - python3-certbot-dns-cloudflare
        state: present

    - name: Start and enable Docker service
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: true

    - name: Start and enable firewalld
      ansible.builtin.systemd:
        name: firewalld
        state: started
        enabled: true

    - name: Add opc user to docker group
      ansible.builtin.user:
        name: opc
        groups: docker
        append: true

    - name: Create Flarum data directory
      ansible.builtin.file:
        path: "{{ flarum_data_dir }}"
        state: directory
        owner: opc
        group: opc
        mode: "0755"

    - name: Create Docker Compose file
      ansible.builtin.template:
        src: docker-compose.yml.j2
        dest: "{{ flarum_data_dir }}/docker-compose.yml"
        owner: opc
        group: opc
        mode: "0644"

    - name: Create environment file
      ansible.builtin.template:
        src: env.j2
        dest: "{{ flarum_data_dir }}/.env"
        owner: opc
        group: opc
        mode: "0600"

    - name: Create Flarum configuration script
      ansible.builtin.template:
        src: configure-flarum.sh.j2
        dest: "{{ flarum_data_dir }}/configure-flarum.sh"
        owner: opc
        group: opc
        mode: "0755"

    - name: Create SSL setup script
      ansible.builtin.template:
        src: setup-ssl.sh.j2
        dest: "{{ flarum_data_dir }}/setup-ssl.sh"
        owner: opc
        group: opc
        mode: "0755"

    - name: Configure firewall rules
      ansible.posix.firewalld:
        port: "{{ item }}"
        permanent: true
        state: enabled
        immediate: true
      loop:
        - "80/tcp"
        - "443/tcp"
        - "22/tcp"

    - name: Start Flarum services
      ansible.builtin.shell: |
        cd {{ flarum_data_dir }}
        docker-compose up -d
      become: true
      become_user: opc
      changed_when: false

    - name: Wait for services to be ready
      ansible.builtin.wait_for:
        port: 80
        host: "{{ ansible_default_ipv4.address }}"
        delay: 30
        timeout: 300

    - name: Display Flarum setup information
      ansible.builtin.debug:
        msg: |
          Flarum is now running!
          Access your forum at: http://{{ ansible_default_ipv4.address }}
          Complete the initial setup through the web interface.

    - name: Create health check script
      ansible.builtin.template:
        src: health-check.sh.j2
        dest: "{{ flarum_data_dir }}/health-check.sh"
        owner: opc
        group: opc
        mode: "0755"

    - name: Create systemd service for health monitoring
      ansible.builtin.template:
        src: flarum-health.service.j2
        dest: /etc/systemd/system/flarum-health.service
        mode: "0644"
      notify: Reload systemd

    - name: Start and enable health monitoring service
      ansible.builtin.systemd:
        name: flarum-health
        state: started
        enabled: true
        daemon_reload: true

  handlers:
    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: true